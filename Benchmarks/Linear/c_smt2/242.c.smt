(set-logic LIA)

( declare-const count Int )
( declare-const count! Int )
( declare-const evenExp Int )
( declare-const evenExp! Int )
( declare-const multFactor Int )
( declare-const multFactor! Int )
( declare-const octant1 Int )
( declare-const octant1! Int )
( declare-const octant2 Int )
( declare-const octant2! Int )
( declare-const oddExp Int )
( declare-const oddExp! Int )
( declare-const term Int )
( declare-const term! Int )
( declare-const x Int )
( declare-const x! Int )
( declare-const tmp Int )
( declare-const tmp! Int )

( declare-const count_0 Int )
( declare-const count_1 Int )
( declare-const count_2 Int )
( declare-const count_3 Int )
( declare-const count_4 Int )
( declare-const evenExp_0 Int )
( declare-const evenExp_1 Int )
( declare-const evenExp_2 Int )
( declare-const evenExp_3 Int )
( declare-const multFactor_0 Int )
( declare-const multFactor_1 Int )
( declare-const multFactor_2 Int )
( declare-const multFactor_3 Int )
( declare-const multFactor_4 Int )
( declare-const multFactor_5 Int )
( declare-const octant1_0 Int )
( declare-const octant1_1 Int )
( declare-const octant2_0 Int )
( declare-const octant2_1 Int )
( declare-const oddExp_0 Int )
( declare-const oddExp_1 Int )
( declare-const oddExp_2 Int )
( declare-const oddExp_3 Int )
( declare-const term_0 Int )
( declare-const term_1 Int )
( declare-const term_2 Int )
( declare-const term_3 Int )
( declare-const term_4 Int )
( declare-const x_0 Int )

( define-fun inv-f( ( count Int )( evenExp Int )( multFactor Int )( octant1 Int )( octant2 Int )( oddExp Int )( term Int )( x Int )( tmp Int ) ) Bool
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
)

( define-fun pre-f ( ( count Int )( evenExp Int )( multFactor Int )( octant1 Int )( octant2 Int )( oddExp Int )( term Int )( x Int )( tmp Int )( count_0 Int )( count_1 Int )( count_2 Int )( count_3 Int )( count_4 Int )( evenExp_0 Int )( evenExp_1 Int )( evenExp_2 Int )( evenExp_3 Int )( multFactor_0 Int )( multFactor_1 Int )( multFactor_2 Int )( multFactor_3 Int )( multFactor_4 Int )( multFactor_5 Int )( octant1_0 Int )( octant1_1 Int )( octant2_0 Int )( octant2_1 Int )( oddExp_0 Int )( oddExp_1 Int )( oddExp_2 Int )( oddExp_3 Int )( term_0 Int )( term_1 Int )( term_2 Int )( term_3 Int )( term_4 Int )( x_0 Int ) ) Bool
	( and
		( = count count_1 )
		( = evenExp evenExp_1 )
		( = multFactor multFactor_1 )
		( = octant1 octant1_1 )
		( = octant2 octant2_1 )
		( = oddExp oddExp_1 )
		( = term term_1 )
		( = x x_0 )
		( = octant1_1 0 )
		( = octant2_1 ( / 3.141590 8 ) )
		( > x_0 octant1_1 )
		( < x_0 octant2_1 )
		( = oddExp_1 x_0 )
		( = evenExp_1 1.000000 )
		( = term_1 x_0 )
		( = count_1 2 )
		( = multFactor_1 0 )
	)
)

( define-fun trans-f ( ( count Int )( evenExp Int )( multFactor Int )( octant1 Int )( octant2 Int )( oddExp Int )( term Int )( x Int )( tmp Int )( count! Int )( evenExp! Int )( multFactor! Int )( octant1! Int )( octant2! Int )( oddExp! Int )( term! Int )( x! Int )( tmp! Int )( count_0 Int )( count_1 Int )( count_2 Int )( count_3 Int )( count_4 Int )( evenExp_0 Int )( evenExp_1 Int )( evenExp_2 Int )( evenExp_3 Int )( multFactor_0 Int )( multFactor_1 Int )( multFactor_2 Int )( multFactor_3 Int )( multFactor_4 Int )( multFactor_5 Int )( octant1_0 Int )( octant1_1 Int )( octant2_0 Int )( octant2_1 Int )( oddExp_0 Int )( oddExp_1 Int )( oddExp_2 Int )( oddExp_3 Int )( term_0 Int )( term_1 Int )( term_2 Int )( term_3 Int )( term_4 Int )( x_0 Int ) ) Bool
	( or
		( and
			( = count_2 count )
			( = evenExp_2 evenExp )
			( = multFactor_2 multFactor )
			( = oddExp_2 oddExp )
			( = term_2 term )
			( = count_2 count! )
			( = evenExp_2 evenExp! )
			( = multFactor_2 multFactor! )
			( = oddExp_2 oddExp! )
			( = term_2 term! )
			( = count count! )
			( = evenExp evenExp! )
			( = multFactor multFactor! )
			( = octant1 octant1! )
			( = octant2 octant2! )
			( = oddExp oddExp! )
			( = term term! )
			( = x x! )
			(= tmp tmp! )
		)
		( and
			( not ( >= oddExp_2 evenExp_2 ) )
			(= count count_1 )
			(= count! count_1 )
			(= evenExp evenExp_1 )
			(= evenExp! evenExp_1 )
			(= multFactor multFactor_1 )
			(= multFactor! multFactor_1 )
			(= octant1 octant1_1 )
			(= octant1! octant1_1 )
			(= octant2 octant2_1 )
			(= octant2! octant2_1 )
			(= oddExp oddExp_1 )
			(= oddExp! oddExp_1 )
			(= term term_1 )
			(= term! term_1 )
			(= x x_0 )
			(= x! x_0 )
			(= tmp tmp! )
		)
	)
)

( define-fun post-f ( ( count Int )( evenExp Int )( multFactor Int )( octant1 Int )( octant2 Int )( oddExp Int )( term Int )( x Int )( tmp Int )( count_0 Int )( count_1 Int )( count_2 Int )( count_3 Int )( count_4 Int )( evenExp_0 Int )( evenExp_1 Int )( evenExp_2 Int )( evenExp_3 Int )( multFactor_0 Int )( multFactor_1 Int )( multFactor_2 Int )( multFactor_3 Int )( multFactor_4 Int )( multFactor_5 Int )( octant1_0 Int )( octant1_1 Int )( octant2_0 Int )( octant2_1 Int )( oddExp_0 Int )( oddExp_1 Int )( oddExp_2 Int )( oddExp_3 Int )( term_0 Int )( term_1 Int )( term_2 Int )( term_3 Int )( term_4 Int )( x_0 Int ) ) Bool
	( and
		( or
			( not
				( and
					( = count count_2)
					( = evenExp evenExp_2)
					( = multFactor multFactor_2)
					( = octant1 octant1_1)
					( = octant2 octant2_1)
					( = oddExp oddExp_2)
					( = term term_2)
					( = x x_0)
				)
			)
			( not
				( and
					( = term_3 ( * term_2 ( / x_0 count_2 ) ) )
					( = ( mod ( / count_2 2 ) 2 ) 0 )
					( = multFactor_3 1 )
					( = multFactor_4 multFactor_3 )
					( = evenExp_3 ( + evenExp_2 ( * multFactor_4 term_3 ) ) )
					( = count_3 ( + count_2 1 ) )
					( = term_4 ( * term_3 ( / x_0 count_3 ) ) )
					( = oddExp_3 ( + oddExp_2 ( * multFactor_4 term_4 ) ) )
					( = count_4 ( + count_3 1 ) )
					( = count_2 count_4 )
					( = evenExp_2 evenExp_3 )
					( = multFactor_2 multFactor_4 )
					( = oddExp_2 oddExp_3 )
					( = term_2 term_4 )
					( not ( >= oddExp_2 evenExp_2 ) )
				)
			)
		)
		( or
			( not
				( and
					( = count count_2)
					( = evenExp evenExp_2)
					( = multFactor multFactor_2)
					( = octant1 octant1_1)
					( = octant2 octant2_1)
					( = oddExp oddExp_2)
					( = term term_2)
					( = x x_0)
				)
			)
			( not
				( and
					( = term_3 ( * term_2 ( / x_0 count_2 ) ) )
					( not ( = ( mod ( / count_2 2 ) 2 ) 0 ) )
					( = multFactor_5 -1 )
					( = multFactor_4 multFactor_5 )
					( = evenExp_3 ( + evenExp_2 ( * multFactor_4 term_3 ) ) )
					( = count_3 ( + count_2 1 ) )
					( = term_4 ( * term_3 ( / x_0 count_3 ) ) )
					( = oddExp_3 ( + oddExp_2 ( * multFactor_4 term_4 ) ) )
					( = count_4 ( + count_3 1 ) )
					( = count_2 count_4 )
					( = evenExp_2 evenExp_3 )
					( = multFactor_2 multFactor_4 )
					( = oddExp_2 oddExp_3 )
					( = term_2 term_4 )
					( not ( >= oddExp_2 evenExp_2 ) )
				)
			)
		)
	)
)
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( pre-f count evenExp multFactor octant1 octant2 oddExp term x tmp count_0 count_1 count_2 count_3 count_4 evenExp_0 evenExp_1 evenExp_2 evenExp_3 multFactor_0 multFactor_1 multFactor_2 multFactor_3 multFactor_4 multFactor_5 octant1_0 octant1_1 octant2_0 octant2_1 oddExp_0 oddExp_1 oddExp_2 oddExp_3 term_0 term_1 term_2 term_3 term_4 x_0  )
		( inv-f count evenExp multFactor octant1 octant2 oddExp term x tmp )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( and
			( inv-f count evenExp multFactor octant1 octant2 oddExp term x tmp )
			( trans-f count evenExp multFactor octant1 octant2 oddExp term x tmp count! evenExp! multFactor! octant1! octant2! oddExp! term! x! tmp! count_0 count_1 count_2 count_3 count_4 evenExp_0 evenExp_1 evenExp_2 evenExp_3 multFactor_0 multFactor_1 multFactor_2 multFactor_3 multFactor_4 multFactor_5 octant1_0 octant1_1 octant2_0 octant2_1 oddExp_0 oddExp_1 oddExp_2 oddExp_3 term_0 term_1 term_2 term_3 term_4 x_0 )
		)
		( inv-f count! evenExp! multFactor! octant1! octant2! oddExp! term! x! tmp! )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( inv-f count evenExp multFactor octant1 octant2 oddExp term x tmp  )
		( post-f count evenExp multFactor octant1 octant2 oddExp term x tmp count_0 count_1 count_2 count_3 count_4 evenExp_0 evenExp_1 evenExp_2 evenExp_3 multFactor_0 multFactor_1 multFactor_2 multFactor_3 multFactor_4 multFactor_5 octant1_0 octant1_1 octant2_0 octant2_1 oddExp_0 oddExp_1 oddExp_2 oddExp_3 term_0 term_1 term_2 term_3 term_4 x_0 )
	)
))


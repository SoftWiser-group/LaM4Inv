(set-logic LIA)

( declare-const t Int )
( declare-const t! Int )
( declare-const v1 Int )
( declare-const v1! Int )
( declare-const v2 Int )
( declare-const v2! Int )
( declare-const v3 Int )
( declare-const v3! Int )
( declare-const x1 Int )
( declare-const x1! Int )
( declare-const x2 Int )
( declare-const x2! Int )
( declare-const x3 Int )
( declare-const x3! Int )

( declare-const t_0 Int )
( declare-const t_1 Int )
( declare-const t_2 Int )
( declare-const t_3 Int )
( declare-const v1_0 Int )
( declare-const v2_0 Int )
( declare-const v2_1 Int )
( declare-const v2_2 Int )
( declare-const v2_3 Int )
( declare-const v2_4 Int )
( declare-const v3_0 Int )
( declare-const x1_0 Int )
( declare-const x1_1 Int )
( declare-const x1_2 Int )
( declare-const x1_3 Int )
( declare-const x2_0 Int )
( declare-const x2_1 Int )
( declare-const x2_2 Int )
( declare-const x2_3 Int )
( declare-const x3_0 Int )
( declare-const x3_1 Int )
( declare-const x3_2 Int )
( declare-const x3_3 Int )

( define-fun inv-f( ( t Int )( v1 Int )( v2 Int )( v3 Int )( x1 Int )( x2 Int )( x3 Int ) ) Bool
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
)

( define-fun pre-f ( ( t Int )( v1 Int )( v2 Int )( v3 Int )( x1 Int )( x2 Int )( x3 Int )( t_0 Int )( t_1 Int )( t_2 Int )( t_3 Int )( v1_0 Int )( v2_0 Int )( v2_1 Int )( v2_2 Int )( v2_3 Int )( v2_4 Int )( v3_0 Int )( x1_0 Int )( x1_1 Int )( x1_2 Int )( x1_3 Int )( x2_0 Int )( x2_1 Int )( x2_2 Int )( x2_3 Int )( x3_0 Int )( x3_1 Int )( x3_2 Int )( x3_3 Int ) ) Bool
	( and
		( = t t_1 )
		( = v1 v1_0 )
		( = v2 v2_0 )
		( = v3 v3_0 )
		( = x1 x1_1 )
		( = x2 x2_1 )
		( = x3 x3_1 )
		( = x1_1 100 )
		( = x2_1 75 )
		( = x3_1 -50 )
		( = t_1 0 )
		( >= v3_0 0 )
		( <= v1_0 5 )
		( >= ( - v1_0 v3_0 ) 0 )
		( = ( - ( - ( * v2_0 2 ) v1_0 ) v3_0 ) 0 )
		( >= ( + v2_0 5 ) 0 )
		( <= v2_0 5 )
	)
)

( define-fun trans-f ( ( t Int )( v1 Int )( v2 Int )( v3 Int )( x1 Int )( x2 Int )( x3 Int )( t! Int )( v1! Int )( v2! Int )( v3! Int )( x1! Int )( x2! Int )( x3! Int )( t_0 Int )( t_1 Int )( t_2 Int )( t_3 Int )( v1_0 Int )( v2_0 Int )( v2_1 Int )( v2_2 Int )( v2_3 Int )( v2_4 Int )( v3_0 Int )( x1_0 Int )( x1_1 Int )( x1_2 Int )( x1_3 Int )( x2_0 Int )( x2_1 Int )( x2_2 Int )( x2_3 Int )( x3_0 Int )( x3_1 Int )( x3_2 Int )( x3_3 Int ) ) Bool
	( or
		( and
			( = t_2 t )
			( = v2_1 v2 )
			( = x1_2 x1 )
			( = x2_2 x2 )
			( = x3_2 x3 )
			( = t_2 t! )
			( = v2_1 v2! )
			( = x1_2 x1! )
			( = x2_2 x2! )
			( = x3_2 x3! )
			( = t t! )
			( = v1 v1! )
			( = v3 v3! )
			( = x1 x1! )
			( = x2 x2! )
			( = x3 x3! )
		)
		( and
			( = t_2 t )
			( = v2_1 v2 )
			( = x1_2 x1 )
			( = x2_2 x2 )
			( = x3_2 x3 )
			( >= ( + v2_1 5 ) 0 )
			( <= v2_1 5 )
			( = x1_3 ( + x1_2 v1_0 ) )
			( = x3_3 ( + x3_2 v3_0 ) )
			( = x2_3 ( + x2_2 v2_1 ) )
			( >= ( - ( - ( * x2_3 2 ) x1_3 ) x3_3 ) 0 )
			( = v2_2 ( - v2_1 1 ) )
			( = v2_3 v2_2 )
			( = t_3 ( + t_2 1 ) )
			( = t_3 t! )
			( = v2_3 v2! )
			( = x1_3 x1! )
			( = x2_3 x2! )
			( = x3_3 x3! )
			(= v1 v1_0 )
			(= v1! v1_0 )
			(= v3 v3_0 )
			(= v3! v3_0 )
		)
		( and
			( = t_2 t )
			( = v2_1 v2 )
			( = x1_2 x1 )
			( = x2_2 x2 )
			( = x3_2 x3 )
			( >= ( + v2_1 5 ) 0 )
			( <= v2_1 5 )
			( = x1_3 ( + x1_2 v1_0 ) )
			( = x3_3 ( + x3_2 v3_0 ) )
			( = x2_3 ( + x2_2 v2_1 ) )
			( not ( >= ( - ( - ( * x2_3 2 ) x1_3 ) x3_3 ) 0 ) )
			( <= ( - ( - ( * x2_3 2 ) x1_3 ) x3_3 ) 0 )
			( = v2_4 ( + v2_1 1 ) )
			( = v2_3 v2_4 )
			( = t_3 ( + t_2 1 ) )
			( = t_3 t! )
			( = v2_3 v2! )
			( = x1_3 x1! )
			( = x2_3 x2! )
			( = x3_3 x3! )
			(= v1 v1_0 )
			(= v1! v1_0 )
			(= v3 v3_0 )
			(= v3! v3_0 )
		)
		( and
			( = t_2 t )
			( = v2_1 v2 )
			( = x1_2 x1 )
			( = x2_2 x2 )
			( = x3_2 x3 )
			( >= ( + v2_1 5 ) 0 )
			( <= v2_1 5 )
			( = x1_3 ( + x1_2 v1_0 ) )
			( = x3_3 ( + x3_2 v3_0 ) )
			( = x2_3 ( + x2_2 v2_1 ) )
			( not ( >= ( - ( - ( * x2_3 2 ) x1_3 ) x3_3 ) 0 ) )
			( not ( <= ( - ( - ( * x2_3 2 ) x1_3 ) x3_3 ) 0 ) )
			( = v2_3 v2_1 )
			( = t_3 ( + t_2 1 ) )
			( = t_3 t! )
			( = v2_3 v2! )
			( = x1_3 x1! )
			( = x2_3 x2! )
			( = x3_3 x3! )
			(= v1 v1_0 )
			(= v1! v1_0 )
			(= v3 v3_0 )
			(= v3! v3_0 )
		)
		( and
			( >= ( + v2_1 5 ) 0 )
			( not ( <= v2_1 5 ) )
			(= t t_1 )
			(= t! t_1 )
			(= v1 v1_0 )
			(= v1! v1_0 )
			(= v2 v2_0 )
			(= v2! v2_0 )
			(= v3 v3_0 )
			(= v3! v3_0 )
			(= x1 x1_1 )
			(= x1! x1_1 )
			(= x2 x2_1 )
			(= x2! x2_1 )
			(= x3 x3_1 )
			(= x3! x3_1 )
		)
	)
)

( define-fun post-f ( ( t Int )( v1 Int )( v2 Int )( v3 Int )( x1 Int )( x2 Int )( x3 Int )( t_0 Int )( t_1 Int )( t_2 Int )( t_3 Int )( v1_0 Int )( v2_0 Int )( v2_1 Int )( v2_2 Int )( v2_3 Int )( v2_4 Int )( v3_0 Int )( x1_0 Int )( x1_1 Int )( x1_2 Int )( x1_3 Int )( x2_0 Int )( x2_1 Int )( x2_2 Int )( x2_3 Int )( x3_0 Int )( x3_1 Int )( x3_2 Int )( x3_3 Int ) ) Bool
	( or
		( not
			( and
				( = t t_2)
				( = v1 v1_0)
				( = v2 v2_1)
				( = v3 v3_0)
				( = x1 x1_2)
				( = x2 x2_2)
				( = x3 x3_2)
			)
		)
		( not
			( and
				( not ( >= ( + v2_1 5 ) 0 ) )
				( not ( >= ( - v1_0 v3_0 ) 0 ) )
			)
		)
	)
)
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( pre-f t v1 v2 v3 x1 x2 x3 t_0 t_1 t_2 t_3 v1_0 v2_0 v2_1 v2_2 v2_3 v2_4 v3_0 x1_0 x1_1 x1_2 x1_3 x2_0 x2_1 x2_2 x2_3 x3_0 x3_1 x3_2 x3_3  )
		( inv-f t v1 v2 v3 x1 x2 x3 )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( and
			( inv-f t v1 v2 v3 x1 x2 x3 )
			( trans-f t v1 v2 v3 x1 x2 x3 t! v1! v2! v3! x1! x2! x3! t_0 t_1 t_2 t_3 v1_0 v2_0 v2_1 v2_2 v2_3 v2_4 v3_0 x1_0 x1_1 x1_2 x1_3 x2_0 x2_1 x2_2 x2_3 x3_0 x3_1 x3_2 x3_3 )
		)
		( inv-f t! v1! v2! v3! x1! x2! x3! )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( inv-f t v1 v2 v3 x1 x2 x3  )
		( post-f t v1 v2 v3 x1 x2 x3 t_0 t_1 t_2 t_3 v1_0 v2_0 v2_1 v2_2 v2_3 v2_4 v3_0 x1_0 x1_1 x1_2 x1_3 x2_0 x2_1 x2_2 x2_3 x3_0 x3_1 x3_2 x3_3 )
	)
))

